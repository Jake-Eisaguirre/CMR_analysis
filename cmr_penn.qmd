---
title: "Exploratory N-Mixture/CMR - Pennsylvania"
format: pdf
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, lubridate, kableExtra)

```

## Connect to `survey_data` schema in `ribbitr` database
```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")



```

## Query 2022 N-Mix Penn data
```{r}

# Data
nmix_q <- "select r.region, s.site, v.date, v.survey_time, s2.duration_minutes, 
          v2.species_ves, v2.count
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join ves v2 on s2.survey_id = v2.survey_id
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01';"

nmix_raw_data <- dbGetQuery(connection, nmix_q) %>% 
  select(!c(region, survey_time, duration_minutes)) %>% 
  arrange(date) 

#write_csv(nmix_raw_data, here("data", "nmix_raw_data.csv"))



# find all visits
visit_nmix_q <- "select r.region, s.site, v.date, v.survey_time
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                where r.region = 'pennsylvania'
                and v.date > '2023-01-01';"

nmix_raw_visits <-dbGetQuery(connection, visit_nmix_q) %>% 
  arrange(date) %>% 
  select(site, date)


#write_csv(nmix_raw_visits, here("data", "nmix_raw_visits.csv"))

```

## Visualize all Visits
```{r}
#nmix_raw_visits <- read_csv(here("data", "nmix_raw_visits.csv"))
#nmix_raw_data <- read_csv(here("data", "nmix_raw_data.csv"))


viz <- nmix_raw_visits %>% 
  group_by(site) %>% 
  summarise(n = n())

ggplot(data = viz) +
  geom_col(aes(x=site, y = n)) +
  ggtitle("Raw Visits")

```
\newpage

## Clean up species list with counts
#### Filter for CMR focal species and summarize species counts. Then populate zeros for 3 focal species into the data set for visits when captures did not occur.
```{r}
#| output: false

# filter for CMR focal species and summarize counts
n_mix_mid_clean_up <- nmix_raw_data %>% 
  filter(species_ves %in% c("pseudacris_crucifer", "rana_catesbeiana", 
                                "rana_clamitans", "rana_pipiens")) %>% 
  #mutate(capture_type = if_else(is.na(capture_type), "new", capture_type)) %>% 
  group_by(date, site, species_ves) %>% 
  summarise(n = sum(count)) %>% 
  ungroup() 

# populate zeros
nmix_clean_up <- n_mix_mid_clean_up %>% 
  #left_join(n_mix_mid_clean_up) %>%
  complete(nesting(date, site), 
           species_ves = unique(n_mix_mid_clean_up$species_ves), 
           fill = list(n = 0))




```

```{r}
kable(head(nmix_clean_up, n = 15))
```

\newpage

## rana_catesbeiana

### N-Mixture Table formatting
#### Filter data for `rana_catesbeiana`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited. 
```{r}

bull_frog_visits <- nmix_clean_up %>% 
  select(site, date, species_ves, n) %>% 
  filter(species_ves == "rana_catesbeiana") %>% 
  select(!species_ves) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))



kable(bull_frog_visits)

```

### static n-mixture models no covariates 
```{r}

bull_frog_unmarked_nmixture <- bull_frog_visits %>% 
  ungroup() %>% 
  select(!c(site, c(visit_4:visit_6))) %>% 
  slice(2:4)


umf <- unmarkedFramePCount(y = bull_frog_unmarked_nmixture)

summary(umf)

fm1 <- pcount( ~ 1 ~ 1, 
               data = umf, 
               engine = "R")

summary(fm1)

backTransform(fm1, "state")

backTransform(fm1, "det")


```
#### Assuming the sites and enviro variables are exactly the same we can say there is 40.7 +-7.9 frogs at each site with 23 % chance of detecting each individual.

\newpage

$~$

## pseudacris_crucifer
### N-Mixture Table formatting
#### Filter data for `pseudacris_crucifer`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.
```{r}

peep_frog_visits <- nmix_clean_up %>% 
  select(site, date, species_capture, n) %>% 
  filter(species_capture == "pseudacris_crucifer") %>% 
  select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n"))%>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))


kable(peep_frog_visits)

```

### static n-mixture model no covariates
```{r}
peep_unmarked_nmixture <- peep_frog_visits %>% 
  ungroup() %>% 
  #filter(capture_type == "new") %>% 
  select(!c(site)) 


umf <- unmarkedFramePCount(y = peep_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

backTransform(fm1, "det")



```
#### Assuming the sites and enviro variables are exactly the same we can estimate there is 85.7 +-24.4 frogs at each site with a 1.2% chance of detecting each individual.

\newpage
## rana_pipens

### N-Mixture Table Formatting
#### Filter data for `rana_pipens`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.

```{r}

leop_frog_visits <- nmix_clean_up %>% 
  select(site, date, species_capture, n) %>% 
  filter(species_capture == "rana_pipiens") %>% 
  #select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  group_by(site, n_visit, ) %>% 
  summarise(n = sum(n)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  #add_row(site = "phelps_pond", capture_type = "recapture") %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .))) 


kable(leop_frog_visits)

```

### static n-mixture with no co-variates

```{r}

leop_frog_unmarked_nmixture <- leop_frog_visits %>% 
  ungroup() %>% 
  select(!c(site)) 


umf <- unmarkedFramePCount(y = leop_frog_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

backTransform(fm1, "det")



```

\newpage


## rana_clamitans

### N-Mixture Table Formatting
#### Filter data for `rana_clamitans`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.

```{r}

green_frog_visits <- nmix_clean_up %>% 
  select(site, date, species_ves, n) %>% 
  filter(species_ves == "rana_clamitans") %>% 
  #select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  group_by(site, n_visit, ) %>% 
  summarise(n = sum(n)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  #add_row(site = "phelps_pond", capture_type = "recapture") %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .))) 


kable(green_frog_visits)

```

### static n-mixture with no co-variates

```{r}

green_frog_unmarked_nmixture <- green_frog_visits %>% 
  ungroup() %>% 
  select(!c(site, c(visit_3:visit_6))) %>% 
  slice(1:3) 


umf <- unmarkedFramePCount(y = green_frog_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

backTransform(fm1, "det")



```
$~$

#### Assuming the sites and enviro variables are exactly the same we estimate there is 94.8 +-13.1 frogs at each sites and with 4.3% of detecting each individual.

\newpage

## Query CMR data
```{r}
# Data
cmr_q <- "select r.region, s.site, v.date, v.survey_time, s2.duration_minutes, 
          c.species_capture, c.capture_type, cmr.capture_date, cmr.cmr_id
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join capture c on s2.survey_id = c.survey_id
          join penn_cmr cmr on c.capture_mark_recapture = cmr.capture_mark_recapture
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01';"

cmr_raw_data <- dbGetQuery(connection, cmr_q) %>% 
  select(!c(region, survey_time, duration_minutes)) %>% 
  arrange(date)

#write_csv(cmr_raw_data, here("data", "cmr_raw_data.csv"))

# find all visits
visit_cmr_q <- "select r.region, s.site, v.date, v.survey_time
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                where r.region = 'pennsylvania'
                and v.date > '2023-01-01';"

cmr_raw_visits <-dbGetQuery(connection, visit_cmr_q) %>% 
  arrange(date) %>% 
  select(site, date)

#write_csv(cmr_raw_visits, here("data", "cmr_raw_visits.csv"))
```

## Bullfrog CMR data
### Matrix: individual counts by visits
```{r}

#cmr_raw_data <- read_csv(here("data", "cmr_raw_data.csv"))
#mr_raw_visits <- read_csv(here("data", "cmr_raw_visits.csv"))

bull_mid_clean_up <- cmr_raw_data %>% 
  filter(species_capture == "rana_catesbeiana") %>% 
  select(!c(capture_date, capture_type)) %>% 
  unite(species_capture, c(species_capture, cmr_id), sep = "_") %>% 
  unique() 
  
bull_pop_zeros <- cmr_raw_visits %>% 
  left_join(bull_mid_clean_up) %>%
  complete(nesting(date, site), 
           fill = list(n = 0)) %>% 
  ungroup() %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() 
  
clean_bull <- bull_pop_zeros %>%   
  group_by(site, species_capture, n_visit) %>% 
  reframe(n = n()) %>% 
  mutate(n = if_else(is.na(species_capture), NA, n),
         n = if_else(n == 2, 1, n)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>%
  select(!c(visit_5, visit_6)) %>% 
  # relocate(visit_1, .before = visit_2) %>% 
  # relocate(visit_3, .after = visit_2) %>% 
  drop_na(species_capture) %>% 
  #filter(!site == "tryon_weber") %>% 
  select(!site) %>% 
  mutate_all(~replace_na(.,0)) 
  
  
```

### Final CMR matrix
```{r}

clean_bull$captureHistory <- paste(clean_bull$visit_1, clean_bull$visit_2, clean_bull$visit_3, 
                                   clean_bull$visit_4, clean_bull$visit_5, clean_bull$visit_6,
                               sep = "")

clean_bull <- clean_bull %>% 
  ungroup() %>% 
  group_by(species_capture, captureHistory) %>% 
  unique()

lev <- unique(clean_bull$captureHistory)

clean_bull$captureHistory <- factor(clean_bull$captureHistory, levels = lev)

bull_table <- table(clean_bull$species_capture, clean_bull$captureHistory)
  

kable(head(bull_table, n = 15))

```

### obs covariates, piFun equal detection, Model runn
```{r}
class(bull_table) <- "matrix"

o2y <- matrix(1, 4, 7)

crPiFun <- function(p) {
    p1 <- p[,1]
    p2 <- p[,2]
    p3 <- p[,3]
    p4 <- p[,4]

    cbind("0010000" = p1 * (1-p2) * (1-p3) * (1-p4),    #1: 1000    
          "0110000" = (1-p1) * (1-p2) * p3 * (1-p4),    #2: 0010
          "0100000" = p1 * p2 * (1-p3) * p4,            #3: 1101
          "0110010" = p1 * p2 * (1-p3) * (1-p4),        #4: 1100
          "0010010" = (1-p1) * (1-p2) *(1-p3) * p4,     #5: 0001
          "0001100" = (1-p1) * p2 * p3 * (1-p4),        #6: 0110
          "0001000" = (1-p1) * p2 * (1-p3) * (1-p4)     #7: 0100

    )
}


umf <- unmarkedFrameMPois(y = bull_table, piFun = "crPiFun", obsToY = o2y)

fm <- multinomPois(~1 ~1, umf, engine = "R")

backTransform(fm, "state")
backTransform(fm, "det")
```

#### Assuming sites are identical we estimate there are 8 individuals at each site? With a 30% chance of detecting each individual?  Not fully sure how to interpret results. 

