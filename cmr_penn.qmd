---
title: "Exploratory N-Mixture/CMR - Pennsylvania"
format: pdf
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, lubridate, kableExtra)

```

## Connect to `survey_data` schema in `ribbitr` database
```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")



```

## Query 2022 N-Mix Penn data
```{r}

# Data
nmix_q <- "select r.region, s.site, v.date, v.survey_time, s2.duration_minutes, 
          c.species_capture, c.capture_type
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join capture c on s2.survey_id = c.survey_id
          where r.region = 'pennsylvania'
          and v.date > '2022-01-01';"

nmix_raw_data <- dbGetQuery(connection, nmix_q) %>% 
  select(!c(region, survey_time, duration_minutes)) %>% 
  arrange(date) 

write_csv(nmix_raw_data, here("data", "nmix_raw_data.csv"))



# find all visits
visit_nmix_q <- "select r.region, s.site, v.date, v.survey_time
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                where r.region = 'pennsylvania'
                and v.date > '2022-01-01';"

nmix_raw_visits <-dbGetQuery(connection, visit_nmix_q) %>% 
  arrange(date) %>% 
  select(site, date)


write_csv(nmix_raw_visits, here("data", "nmix_raw_visits.csv"))

```

## Visualize all Visits
```{r}
nmix_raw_visits <- read_csv(here("data", "nmix_raw_visits.csv"))
nmix_raw_data <- read_csv(here("data", "nmix_raw_data.csv"))


viz <- nmix_raw_visits %>% 
  group_by(site) %>% 
  summarise(n = n())

ggplot(data = viz) +
  geom_col(aes(x=site, y = n)) +
  ggtitle("Raw Visits")

```


## Clean up species list with counts
#### Filter for CMR focal species and summarize species counts. Then populate zeros for 3 focal species into the data set for visits when captures did not occur.
```{r}
#| output: false

# filter for CMR focal species and summarize counts
n_mix_mid_clean_up <- nmix_raw_data %>% 
  filter(species_capture %in% c("pseudacris_crucifer", "rana_catesbeiana", 
                                "rana_clamitans")) %>% 
  mutate(capture_type = if_else(is.na(capture_type), "new", capture_type)) %>% 
  group_by(date, site, species_capture) %>% 
  summarise(n = n()) %>% 
  ungroup() 

# populate zeros
nmix_clean_up <- nmix_raw_visits %>% 
  left_join(n_mix_mid_clean_up) %>%
  complete(nesting(date, site), 
           species_capture = unique(n_mix_mid_clean_up$species_capture), 
           fill = list(n = 0))




```

```{r}
#kable(head(clean_up, n = 15))
```


## rana_catesbeiana

### N-Mixture Table formatting
#### Filter data for `rana_catesbeiana`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited. 
```{r}

bull_frog_visits <- nmix_clean_up %>% 
  select(site, date, species_capture, n) %>% 
  filter(species_capture == "rana_catesbeiana") %>% 
  select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))



#kable(bull_frog_visits)

```

### static n-mixture models no covariates 
```{r}

bull_frog_unmarked_nmixture <- bull_frog_visits %>% 
  ungroup() %>% 
  select(!site)

site <- bull_frog_visits %>% 
  select(site) %>%
  rename(x2 = site) %>% 
  add_column(x1 = c(1:7)) %>%
  relocate(x1, .before = x2) %>%
  ungroup() %>%
  data.frame() %>% 
  mutate(x2 = as.factor(x2))


umf <- unmarkedFramePCount(y = bull_frog_unmarked_nmixture, siteCovs = site)

summary(umf)

fm1 <- pcount( ~ 1 ~ x2, data = umf, engine = "R")

summary(fm1)

# Get estimates on link scale 
backTransform(fm1, "state") 
# Get estimates on natural scale
backTransform(fm1, "det")

confint(fm1, type = "state", level = 0.95)


#site covariates example
R <- 4 # number of sites
J <- 3 # number of visits
y <- matrix(c(
   1,2,0,
   0,0,0,
   1,1,1,
   2,2,1), nrow=R, ncol=J, byrow=TRUE)
y

site.covs <- data.frame(x1=1:4, x2=factor(c('A','B','A','B')))
site.covs

obs.covs <- list(
   x3 = matrix(c(
      -1,0,1,
      -2,0,0,
      -3,1,0,
      0,0,0), nrow=R, ncol=J, byrow=TRUE),
   x4 = matrix(c(
      'a','b','c',
      'd','b','a',
      'a','a','c',
      'a','b','a'), nrow=R, ncol=J, byrow=TRUE))
obs.covs

umf <- unmarkedFramePCount(y=y, siteCovs=site.covs, 
    obsCovs=obs.covs)          # organize data
umf                            # take a l
summary(umf)                   # summarize data
fm <- pcount(~1 ~1, umf, K=10) 

```
#### Assuming the sites and enviro variables are exactly the same we can say there is 40.7 +-7.9 frogs at these sites and ??? 23 % chance of detecting each individual.


$~$

## pseudacris_crucifer
### N-Mixture Table formatting
#### Filter data for `pseudacris_crucifer`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.
```{r}

peep_frog_visits <- clean_up %>% 
  select(site, date, species_capture, n) %>% 
  filter(species_capture == "pseudacris_crucifer") %>% 
  select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n"))%>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))


#kable(peep_frog_visits)

```

### static n-mixture unmakred models no covariates

```{r}
peep_unmarked_nmixture <- peep_frog_visits %>% 
  ungroup() %>% 
  #filter(capture_type == "new") %>% 
  select(!c(site)) 


umf <- unmarkedFramePCount(y = peep_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

backTransform(fm1, "det")



```
#### Assuming the sites and enviro variables are exactly the same we can estimate there is 85.7 +-24.4 frogs at these sites and we are only detecting 1.2% of the frogs.

$~$

## rana_clamitans

### N-Mixture Table Formatting
#### Filter data for `rana_clamitans`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.

```{r}

green_frog_visits <- clean_up %>% 
  select(site, date, species_capture, n) %>% 
  filter(species_capture == "rana_clamitans") %>% 
  #select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  group_by(site, n_visit, ) %>% 
  summarise(n = sum(n)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  #add_row(site = "phelps_pond", capture_type = "recapture") %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .))) 



```

### static n-mixture with no co-variates

```{r}

green_frog_unmarked_nmixture <- green_frog_visits %>% 
  ungroup() %>% 
  select(!c(site)) 


umf <- unmarkedFramePCount(y = green_frog_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

backTransform(fm1, "det")



```
#### Assuming the sites and enviro variables are exactly the same we estimate there is 94.8 +-13.1 frogs at these sites and we are only detecting 4.3% of the frogs.

$~$

# Query CMR data
```{r}
# Data
cmr_q <- "select r.region, s.site, v.date, v.survey_time, s2.duration_minutes, 
          c.species_capture, c.capture_type, cmr.capture_date, cmr.cmr_id
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join capture c on s2.survey_id = c.survey_id
          join penn_cmr cmr on c.capture_mark_recapture = cmr.capture_mark_recapture
          where r.region = 'pennsylvania'
          and v.date > '2022-01-01';"

cmr_raw_data <- dbGetQuery(connection, cmr_q) %>% 
  select(!c(region, survey_time, duration_minutes)) %>% 
  arrange(date)

write_csv(cmr_raw_data, here("data", "cmr_raw_data.csv"))

# find all visits
visit_cmr_q <- "select r.region, s.site, v.date, v.survey_time
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                where r.region = 'pennsylvania'
                and v.date > '2022-01-01';"

cmr_raw_visits <-dbGetQuery(connection, visit_cmr_q) %>% 
  arrange(date) %>% 
  select(site, date)

write_csv(cmr_raw_visits, here("data", "cmr_raw_visits.csv"))
```

## Bullfrog CMR data
### Matrix: individual counts by visits
```{r}

cmr_raw_data.csv <- read_csv(here("data", "cmr_raw_data.csv"))
cmr_raw_visits <- read_csv(here("data", "cmr_raw_visits.csv"))

mid_clean_up <- raw_data %>% 
  filter(species_capture == "rana_catesbeiana") %>% 
  select(!c(capture_date, capture_type)) %>% 
  unite(species_capture, c(species_capture, cmr_id), sep = "_") %>% 
  unique() 
  
pop_zeros <- raw_visits %>% 
  left_join(mid_clean_up) %>%
  complete(nesting(date, site), 
           fill = list(n = 0)) %>% 
  ungroup() %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() 
  
clean <- pop_zeros %>%   
  group_by(site, species_capture, n_visit) %>% 
  reframe(n = n()) %>% 
  mutate(n = if_else(n == 2, 1, n)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  relocate(visit_1, .before = visit_2) %>% 
  relocate(visit_3, .after = visit_2) %>% 
  select(!species_capture) %>% 
  filter(!site == "tryon_weber") %>% 
  mutate_all(~replace_na(.,0))
  
  
```

### Final matrix
```{r}

clean$captureHistory <- paste(clean$visit_1, clean$visit_2, clean$visit_3, clean$visit_4, clean$visit_5, clean$visit_6, clean$visit_7,
                               sep = "")

lev <- unique(clean$captureHistory)

clean$captureHistory <- factor(clean$captureHistory, levels = lev)

table <- table(clean$site, clean$captureHistory)

head(table)

class(table) <- "matrix"

o2y <- matrix(1, 6, 7)


crPiFun <- function(p, n) {
  
   p^n * (1-n)^(1-n)
  
}


umf <- unmarkedFrameMPois(y = table, piFun = "crPiFun", obsToY = o2y)

fm <- multinomPois(~1 ~1, umf, engine = "R")

backTransform(fm, "state")
```


```{r}

alfl <- read.csv(system.file("csv", "alfl.csv", package="unmarked"))

alfl.covs <- read.csv(system.file("csv", "alflCovs.csv",package="unmarked"), row.names=1)

alfl$captureHistory <- paste(alfl$interval1, alfl$interval2, alfl$interval3, sep="")

alfl$captureHistory <- factor(alfl$captureHistory, levels=c("001", "010", "011", "100", "101", "110", "111"))

alfl$id <- factor(alfl$id, levels=rownames(alfl.covs))

alfl.v1 <- alfl[alfl$survey==1,]

alfl.H1 <- table(alfl.v1$id, alfl.v1$captureHistory)


intervalMat <- matrix(c('1','2','3'), 50, 3, byrow=TRUE) 

class(alfl.H1) <- "matrix"

o2y <- matrix(1, 3, 7)

crPiFun <- function(p) {
    p1 <- p[,1]
    p2 <- p[,2]
    p3 <- p[,3]
    cbind("001" = (1-p1) * (1-p2) * p3,
          "010" = (1-p1) * p2     * (1-p3),
          "011" = (1-p1) * p2     * p3,
          "100" = p1     * (1-p2) * (1-p3),
          "101" = p1     * (1-p2) * p3,
          "110" = p1     * p2     * (1-p3),
          "111" = p1     * p2     * p3)
}

umf.cr1 <- unmarkedFrameMPois(y=alfl.H1,
                              siteCovs=alfl.covs[,c("woody", "struct", "time.1")],
                              obsCovs=list(interval=intervalMat), obsToY=o2y, piFun="crPiFun")
```


