---
title: "CMR Pennsylvania"
format: html
editor: visual
---

## Load Packages

```{r}

if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, reshape2, lubridate)

```

## Connect to `survey_data` schema in `ribbitr` database

```{r}

tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")



```

## Query 2022 and new CMR Penn data

```{r}

# 30 unique dates for visits
cmr_q <- "select r.region, s.site, v.date, v.survey_time, s2.duration_minutes, 
          c.species_capture, c.capture_type
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join capture c on s2.survey_id = c.survey_id
          where r.region = 'pennsylvania'
          and v.date > '2022-01-01';"

raw_data <- dbGetQuery(connection, cmr_q) %>% 
  select(!c(region, survey_time, duration_minutes)) %>% 
  arrange(date)



# Confirmed we had no visits with out any captures #
visit_cmr_q <- "select r.region, s.site, v.date, v.survey_time
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                where r.region = 'pennsylvania'
                and v.date > '2022-01-01';"

raw_visits <-dbGetQuery(connection, visit_cmr_q) %>% 
  arrange(date) %>% 
  select(site, date)

viz <- raw_visits %>% 
  group_by(site) %>% 
  summarise(n = n())

ggplot(data = viz) +
  geom_col(aes(x=site, y = n))

```

## Clean up species list with counts

```{r}

clean_up_dates <- raw_visits %>% 
  select(site, date) %>% 
  group_by(site, date) %>% 
  distinct() %>% 
  ungroup() 

clean_up <- raw_data %>% 
  filter(species_capture %in% c("pseudacris_crucifer", "rana_catesbeiana", 
                                "rana_clamitans")) %>% 
  mutate(capture_type = if_else(is.na(capture_type), "new", capture_type)) %>% 
  group_by(date, site, species_capture) %>% 
  summarise(n = n()) %>% 
  ungroup()

  

  

zero_dates <- raw_visits %>% 
  select(site, date) %>% 
  group_by(site, date) %>% 
  distinct() %>% 
  anti_join(clean_up_dates, by = c("site", "date")) %>% 
  mutate(species_capture = "",
         capture_type = "new",
         n = "")

clean_up <- mid_clean_up %>% 
  plyr::rbind.fill(zero_dates) %>% 
  complete(site, species_capture, fill = list(frequency = 0))




zero_dates_bull <- raw_visits %>% 
  select(site, date) %>% 
  group_by(site, date) %>% 
  distinct() %>% 
  anti_join(clean_up_dates, by = c("site", "date")) %>% 
  mutate(species_capture = "rana_catesbeiana",
         n = 0,
         capture_type = "new")

zero_dates_peep <- raw_visits %>% 
  select(site, date) %>% 
  group_by(site, date) %>% 
  distinct() %>% 
  anti_join(clean_up_dates, by = c("site", "date")) %>% 
  mutate(species_capture = "pseudacris_crucifer",
         n = 0,
         capture_type = "new")

zero_dates_green <- raw_visits %>% 
  select(site, date) %>% 
  group_by(site, date) %>% 
  distinct() %>% 
  anti_join(clean_up_dates, by = c("site", "date")) %>% 
  mutate(species_capture = "pseudacris_crucifer",
         n = 0,
         capture_type = "new")


clean_up <- plyr::rbind.fill(mid_clean_up, zero_dates_green,zero_dates_peep, zero_dates_bull)


  

```

## rana_catesbeiana
### Table formattig
```{r}

bull_frog_visits <- clean_up %>% 
  select(site, date, species_capture, n) %>% 
  filter(species_capture == "rana_catesbeiana") %>% 
  select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n"))%>% 
  #add_row(site = "phelps_pond", capture_type = "recapture") %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))





```

### n-mixture unmakred models
```{r}

bull_frog_unmarked_nmixture <- bull_frog_visits %>% 
  ungroup() %>% 
  #filter(capture_type == "new") %>% 
  select(!c(site)) 

# %>% 
#   mutate(N = rowSums(across(c(visit_1:visit_6)))) %>% 
#   relocate(N, .before = visit_1)

umf <- unmarkedFramePCount(y = bull_frog_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

#backTransform(fm1, "det")

```

## pseudacris_crucifer
### Table formattig
```{r}

peep_frog_visits <- clean_up %>% 
  select(site, date, species_capture, n) %>% 
  filter(species_capture == "pseudacris_crucifer") %>% 
  select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n"))%>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))



```

### n-mixture unmakred models
```{r}
peep_unmarked_nmixture <- peep_frog_visits %>% 
  ungroup() %>% 
  #filter(capture_type == "new") %>% 
  select(!c(site)) 

# %>% 
#   mutate(N = rowSums(across(c(visit_1:visit_6)))) %>% 
#   relocate(N, .before = visit_1)

umf <- unmarkedFramePCount(y = peep_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

#backTransform(fm1, "det")

```

## rana_clamitans
### Table formattig
```{r}

green_frog_visits <- clean_up %>% 
  select(site, date, species_capture, n, capture_type) %>% 
  filter(species_capture == "rana_clamitans") %>% 
  select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n"))%>% 
  add_row(site = "phelps_pond", capture_type = "recapture") %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))



```

### n-mixture unmakred models
```{r}

green_frog_unmarked_nmixture <- green_frog_visits %>% 
  ungroup() %>% 
  filter(capture_type == "new") %>% 
  select(!c(capture_type, site)) 

# %>% 
#   mutate(N = rowSums(across(c(visit_1:visit_6)))) %>% 
#   relocate(N, .before = visit_1)

umf <- unmarkedFramePCount(y = bull_frog_unmarked_nmixture)

summary(umf)

fm1 <- pcount(~1 ~1, data = umf)

backTransform(fm1, "state") 

backTransform(fm1, "det")

```





## Table formating multivariate n-mixutre
```{r}

bull_frog_m_n_mixture <-  bull_frog_visits %>% 
  filter(capture_type == "new") %>% 
  select(!capture_type)

bull_frog_m_n_mixture$captureHistory <- paste(bull_frog_m_n_mixture$visit_1, bull_frog_m_n_mixture$visit_2,
                                              bull_frog_m_n_mixture$visit_3, bull_frog_m_n_mixture$visit_4,
                                              bull_frog_m_n_mixture$visit_5, bull_frog_m_n_mixture$visit_6,
                                              sep = "")


a <- expand.grid(0:1, 0:1, 0:1, 0:1, 0:1, 0:1)

bull_frog_m_n_mixture$captureHistory <- factor(bull_frog_m_n_mixture$captureHistory,
                                               levels = c()

alfl$captureHistory <- paste(alfl$interval1, alfl$interval2, alfl$interval3, sep="")
alfl$captureHistory <- factor(alfl$captureHistory,
    levels=c("001", "010", "011", "100", "101", "110", "111"))
## Don't do this:
#levels(alfl$id) <- rownames(alfl.covs)
alfl$id <- factor(alfl$id, levels=rownames(alfl.covs))


```

