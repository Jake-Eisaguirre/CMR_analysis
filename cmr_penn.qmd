---
title: "Exploratory N-Mixture/CMR - Pennsylvania"
format: pdf
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, lubridate, kableExtra, GGally, MuMIn, AHMbook, AICcmodavg)

```

## Connect to `survey_data` schema in `ribbitr` database
```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")



```

## Query 2022 N-Mix Penn data
```{r}

# Data
nmix_q <- "select r.region, s.site, s.area_sqr_m, v.date, v.survey_time, s2.duration_minutes, 
          v2.species_ves, v2.count, v2.observer, s2.air_temp_c, s2.water_temp_c, s2.wind, s2.sky, s2.relative_humidity_percent
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join ves v2 on s2.survey_id = v2.survey_id
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01';"

nmix_raw_data <- dbGetQuery(connection, nmix_q) %>% 
  select(!c(region, survey_time)) %>% 
  arrange(date) 

#write_csv(nmix_raw_data, here("data", "nmix_raw_data.csv"))



# find all visits
visit_nmix_q <- "select r.region, s.site, v.date, v.survey_time, s2.detection_type, s2.observer
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                join survey s2 on v.visit_id = s2.visit_id
                where r.region = 'pennsylvania'
                and v.date > '2023-01-01'
                and s2.detection_type = 'visual';"

nmix_raw_visits <-dbGetQuery(connection, visit_nmix_q) %>% 
  arrange(date) %>% 
  select(site, date)


#write_csv(nmix_raw_visits, here("data", "nmix_raw_visits.csv"))

```

## Visualize all VES Visits
```{r}
#nmix_raw_visits <- read_csv(here("data", "nmix_raw_visits.csv"))
#nmix_raw_data <- read_csv(here("data", "nmix_raw_data.csv"))


viz <- nmix_raw_visits %>% 
  group_by(site) %>% 
  summarise(n = n())

ggplot(data = viz) +
  geom_col(aes(x=site, y = n)) +
  ggtitle("Raw Visits")

```
\newpage

## Clean up species list with counts
#### Filter for CMR focal species and summarize species counts. Then populate zeros for 3 focal species into the data set for visits when captures did not occur.
```{r}
#| output: false

# filter for CMR focal species and summarize counts
n_mix_mid_clean_up <- nmix_raw_data %>% 
  filter(species_ves %in% c("pseudacris_crucifer", "rana_catesbeiana", 
                                "rana_clamitans", "rana_pipiens")) %>% 
  #mutate(capture_type = if_else(is.na(capture_type), "new", capture_type)) %>% 
  group_by(date, site, species_ves) %>% 
  summarise(n = sum(count)) %>% 
  ungroup() 

# populate zeros
nmix_clean_up <- n_mix_mid_clean_up %>% 
  full_join(nmix_raw_visits) %>%
  complete(nesting(date, site), 
           species_ves = unique(n_mix_mid_clean_up$species_ves), 
           fill = list(n = 0)) %>% 
  drop_na(species_ves)




```

```{r}
kable(head(nmix_clean_up, n = 15))
```

\newpage

## rana_catesbeiana

### N-Mixture Table formatting
#### Filter data for `rana_catesbeiana`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited. 
```{r}

bull_frog_visits <- nmix_clean_up %>% 
  select(site, date, species_ves, n) %>% 
  filter(species_ves == "rana_catesbeiana") %>% 
  select(!species_ves) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .)))



kable(bull_frog_visits)

```

### covariates
```{r}
#| warning: false 

# obs covariates
n_mix_obs_cov_mid <- nmix_raw_data %>% 
  filter(species_ves %in% c("pseudacris_crucifer", "rana_catesbeiana", 
                                "rana_clamitans", "rana_pipiens")) %>% 
  group_by(date, site) %>% 
  reframe(duration_minutes = mean(duration_minutes), 
         air_temp_c = mean(air_temp_c),
         water_temp_c = mean(water_temp_c),
         area_sqr_m = mean(area_sqr_m),
         wind = wind,
         sky = sky,
         rh = relative_humidity_percent) %>% 
  group_by(date, site) %>% 
  unique() 
#%>% 
  # ungroup() %>% 
  # mutate(duration_minutes = scale(duration_minutes),
  #        air_temp_c = scale(air_temp_c),
  #        water_temp_c = scale(water_temp_c),
  #        area_sqr_m = scale(area_sqr_m),
  #        rh = scale(rh))

# exlude: water_temp
ggpairs(n_mix_obs_cov_mid[,-9], progress = F, columns = 3:8)

#columns = 3:9


# site covariatesar
area <- nmix_raw_data %>% 
  filter(species_ves %in% c("pseudacris_crucifer", "rana_catesbeiana", 
                                "rana_clamitans", "rana_pipiens")) %>% 
  group_by(site) %>% 
  reframe(area_sqr_m) %>% 
  unique() %>% 
  ungroup() %>% 
  filter(!site == "wood_lab_pond") %>% 
  add_row(site = "rv_pond_2", area_sqr_m = 1306) %>% 
  select(!c(site)) %>% 
  mutate(area_sqr_m = scale(area_sqr_m)) %>% 
  as.data.frame()
 
  
  

```

#### duration_minutes
```{r}

# duration minutes survey
f_duration_mins <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(air_temp_c, water_temp_c,date, area_sqr_m, wind, sky, rh)) %>% 
  mutate(duration_minutes = scale(duration_minutes)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("duration_minutes")) %>% 
  ungroup() %>% 
  filter(!site == "wood_lab_pond") %>% 
  select(!c(visit_4:visit_6, site))

t_duration_mins <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(air_temp_c, water_temp_c,date, area_sqr_m, wind, sky, rh)) %>% 
  mutate(duration_minutes = scale(duration_minutes)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("duration_minutes")) %>% 
  ungroup() %>% 
  filter(site == "rv_pond") %>% 
  select(c(visit_4:visit_6)) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5,
         visit_3 = visit_6)

duration_mins <- rbind(f_duration_mins, t_duration_mins)
```

#### Wind - Category
```{r}

# duration minutes survey
f_wind <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(air_temp_c, water_temp_c,date, area_sqr_m,duration_minutes , sky, rh)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("wind")) %>% 
  ungroup() %>% 
  filter(!site == "wood_lab_pond") %>% 
  select(!c(visit_4:visit_6, site))

t_wind <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(air_temp_c, water_temp_c,date, area_sqr_m, duration_minutes, sky, rh)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("wind")) %>% 
  ungroup() %>% 
  filter(site == "rv_pond") %>% 
  select(c(visit_4:visit_6)) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5,
         visit_3 = visit_6)

wind <- rbind(f_wind, t_wind)


```

#### Sky - category
```{r}
# duration minutes survey
f_sky <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(air_temp_c, water_temp_c,date, area_sqr_m,duration_minutes , wind, rh)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("sky")) %>% 
  ungroup() %>% 
  filter(!site == "wood_lab_pond") %>% 
  select(!c(visit_4:visit_6, site))

t_sky <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(air_temp_c, water_temp_c,date, area_sqr_m, duration_minutes, wind, rh)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("sky")) %>% 
  ungroup() %>% 
  filter(site == "rv_pond") %>% 
  select(c(visit_4:visit_6)) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5,
         visit_3 = visit_6)

sky <- rbind(f_sky, t_sky)
```


#### water temp - REMOVE Correlated
```{r}
# f_water <- n_mix_obs_cov_mid %>% 
#   group_by(site) %>% 
#   mutate(n_visit = match(date, unique(date)),
#          n_visit = paste0("visit_", n_visit, sep = "")) %>% 
#   select(!c(air_temp_c, duration_minutes,date, area_sqr_m, wind, sky, rh)) %>% 
#   pivot_wider(names_from = c("n_visit"), values_from = c("water_temp_c")) %>% 
#   ungroup() %>% 
#   filter(!site == "wood_lab_pond") %>% 
#   select(!c(visit_4:visit_6, site))
# 
# t_water <- n_mix_obs_cov_mid %>% 
#   group_by(site) %>% 
#   mutate(n_visit = match(date, unique(date)),
#          n_visit = paste0("visit_", n_visit, sep = "")) %>% 
#   select(!c(air_temp_c,duration_minutes ,date, area_sqr_m, wind, sky, rh)) %>% 
#   pivot_wider(names_from = c("n_visit"), values_from = c("water_temp_c")) %>% 
#   ungroup() %>% 
#   filter(site == "rv_pond") %>% 
#   select(c(visit_4:visit_6)) %>% 
#   rename(visit_1 = visit_4,
#          visit_2 = visit_5,
#          visit_3 = visit_6)
# 
# water <- rbind(f_water, t_water)

```

#### air temp
```{r}

f_air <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(water_temp_c, duration_minutes,date, area_sqr_m, wind, sky, rh)) %>%
  mutate(air_temp_c = scale(air_temp_c)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c( "air_temp_c")) %>% 
  ungroup() %>% 
  filter(!site == "wood_lab_pond") %>% 
  select(!c(visit_4:visit_6, site))

t_air <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(water_temp_c,duration_minutes ,date, area_sqr_m, wind, sky, rh)) %>% 
  mutate(air_temp_c = scale(air_temp_c)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("air_temp_c")) %>% 
  ungroup() %>% 
  filter(site == "rv_pond") %>% 
  select(c(visit_4:visit_6)) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5,
         visit_3 = visit_6)

air <- rbind(f_air, t_air)
  

```

#### RH Percent

```{r}

f_rh <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(water_temp_c, duration_minutes,date, area_sqr_m, wind, sky, air_temp_c)) %>% 
  mutate(rh = scale(rh)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c( "rh")) %>% 
  ungroup() %>% 
  filter(!site == "wood_lab_pond") %>% 
  select(!c(visit_4:visit_6, site))

t_rh <- n_mix_obs_cov_mid %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!c(water_temp_c,duration_minutes ,date, area_sqr_m, wind, sky, air_temp_c)) %>% 
  mutate(rh = scale(rh)) %>%
  pivot_wider(names_from = c("n_visit"), values_from = c("rh")) %>% 
  ungroup() %>% 
  filter(site == "rv_pond") %>% 
  select(c(visit_4:visit_6)) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5,
         visit_3 = visit_6)

rh <- rbind(f_rh, t_rh)
  

```

### Bullfrog static n-mixture models no covariates - 3 repeat sites
```{r}

first_bull_frog_unmarked_nmixture <- bull_frog_visits %>% 
  ungroup() %>% 
  filter(!site %in% c("wood_lab_pond", "admin_pond", "phelps_pond")) %>% 
  select(!c(site, c(visit_4:visit_6)))

second_bull_frog_unmarked_nxmixture <- bull_frog_visits %>% 
  ungroup() %>% 
  filter(!site %in% c("wood_lab_pond", "admin_pond", "phelps_pond")) %>% 
  select(site, c(visit_4:visit_6)) %>% 
  slice(2) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5,
         visit_3 = visit_6) %>% 
  select(!c(site))

bull_frog_nmixture_3_visits <- rbind(first_bull_frog_unmarked_nmixture, second_bull_frog_unmarked_nxmixture)


bf_umf_3 <- unmarkedFramePCount(y = bull_frog_nmixture_3_visits, 
                                obsCovs = list(survey_minutes = duration_mins,
                                               #water_temp = water,
                                               air_temp = air,
                                               sky = sky,
                                               wind = wind,
                                               rh = rh),
                                siteCovs = area)

summary(bf_umf_3)

fm1_bf3 <- pcount( ~ survey_minutes  + air_temp + rh + sky + wind ~ area_sqr_m, 
               data = bf_umf_3, 
               engine = "R",
               control=list(trace=T, REPORT=5))

summary(fm1_bf3)

# ~ air_temp + wind ~ 1 best model?
dredge(fm1_bf3, beta = "none")

best_bf3 <- pcount( ~ air_temp + wind ~ 1, 
               data = bf_umf_3, 
               engine = "R",
               control=list(trace=T, REPORT=5))


backTransform(best_bf3, "state")

plogis(coef(best_bf3, type = "det"))


# residual check
AICcmodavg::Nmix.gof.test(best_bf3)


pred_data <- data.frame(air_temp = seq(-0.761, 1.55, , 10))

predicted_air_temp <- predict(best_bf3, type = "det", newdata = pred_data, append = T)

plot(Predicted ~ air_temp, predicted_air_temp, type = "o")

```
### Bullfrog glm possion models no covariates - 3 repeat sites
```{r}

glm_data <- cbind(bull_frog_nmixture_3_visits, area)

# visit 1
v_1_data <- glm_data %>% 
  select(visit_1, area_sqr_m)

v_1 <- glm(visit_1 ~ area_sqr_m, data = v_1_data, family = poisson(link = "log"))
v_1
exp(v_1$coefficients[1])

# visit 2
v_2_data <- glm_data %>% 
  select(visit_2, area_sqr_m)

v_2 <- glm(visit_2 ~ area_sqr_m, data = v_2_data, family = poisson(link = "log"))
v_2
exp(v_2$coefficients[1])


# visit 3
v_3_data <- glm_data %>% 
  select(visit_3, area_sqr_m)

v_3 <- glm(visit_3 ~ area_sqr_m, data = v_3_data, family = poisson(link = "log"))
v_3
exp(v_3$coefficients[1])



```



\newpage

### Bullfrog static n-mixture models no covariates - 2 repeat sites
```{r}

first_bull_frog_unmarked_nmixture <- bull_frog_visits %>% 
  ungroup() %>% 
  filter(!site == "wood_lab_pond") %>% 
  select(!c(site, c(visit_3:visit_6))) 

second_bull_frog_unmarked_nxmixture <- bull_frog_visits %>% 
  ungroup() %>% 
  select(site, c(visit_4:visit_5)) %>% 
  slice(2) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5) %>% 
  select(!c(site))

bull_frog_nmixture_2_visits <- rbind(first_bull_frog_unmarked_nmixture, second_bull_frog_unmarked_nxmixture)

bf_umf_2 <- unmarkedFramePCount(y = bull_frog_nmixture_2_visits,
                                obsCovs = list(survey_minutes = duration_mins[1:4,1:2],
                                               #water_temp = water,
                                               air_temp = air[1:4,1:2],
                                               sky = sky[1:4,1:2],
                                               wind = wind[1:4,1:2]),
                                               #rh = rh[1:4,1:2]),
                                siteCovs = area)

summary(bf_umf_2)

fm1_bf2 <- pcount( ~ survey_minutes  + air_temp + sky + wind ~ area_sqr_m, 
               data = bf_umf_2, 
               engine = "R",
               control=list(trace=T, REPORT=5))

dredge(fm1_bf2, beta = "none")

# Best model: ~survey_minutes ~area_sqr_m
best_bf2 <- pcount( ~ survey_minutes + wind ~ 1, 
               data = bf_umf_2, 
               engine = "R",
               control=list(trace=T, REPORT=5))

summary(best_bf2)

backTransform(best_bf2, "state")
plogis(coef(best_bf2, type = "det"))

bf2_res <- residuals(best_bf2) %>% 
  as.data.frame()

qqnorm(bf2_res$visit_1)
qqnorm(bf2_res$visit_2)

pred_data <- data.frame(survey_minutes = seq(-1.52, 1.15, , 10))

predicted_dur_min <- predict(best_bf2, type = "state", newdata = pred_data, append = T)

plot(Predicted ~ survey_minutes, predicted_dur_min, type = "o")


```

#### Assuming the sites and enviro variables are exactly the same we can say there is 13.91 +-3.18 frogs at each site with 79 % chance of detecting each individual when 2 repeat visits occur nightly.

\newpage



## rana_clamitans

### N-Mixture Table Formatting
#### Filter data for `rana_clamitans`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.

```{r}

green_frog_visits <- nmix_clean_up %>% 
  select(site, date, species_ves, n) %>% 
  filter(species_ves == "rana_clamitans") %>% 
  #select(!species_capture) %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() %>%
  group_by(site, n_visit, ) %>% 
  summarise(n = sum(n)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
  #add_row(site = "phelps_pond", capture_type = "recapture") %>% 
  group_by(site) %>% 
  mutate(across(contains("visit"), 
                ~ifelse(is.na(.) &
                          !is.na(lag(.)), 0, .))) %>% 
  filter(!site == "wood_lab_pond")


kable(green_frog_visits)

```


### static n-mixture with no co-variates - 3 repeat visits

```{r}

first_green_frog_unmarked_nmixture <- green_frog_visits %>%  
  ungroup() %>% 
  select(!c(site, c(visit_4:visit_6))) 

second_green_frog_unmarked_nxmixture <- green_frog_visits %>% 
 ungroup() %>% 
  select(site, c(visit_4:visit_6)) %>% 
  slice(1) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5,
         visit_3 = visit_6) %>% 
  select(!c(site))

green_frog_nmixture_3_visits <- rbind(first_green_frog_unmarked_nmixture, second_green_frog_unmarked_nxmixture)


umf_green3 <- unmarkedFramePCount(y = green_frog_nmixture_3_visits,
                                  obsCovs = list(survey_minutes = duration_mins,
                                               #water_temp = water,
                                               air_temp = air,
                                               sky = sky,
                                               wind = wind,
                                               rh = rh),
                                siteCovs = area)

summary(umf_green3)

fm1_g3 <- pcount(~ survey_minutes  + air_temp + rh + sky + wind ~ area_sqr_m, 
               data = umf_green3, 
               engine = "R",
               control=list(trace=T, REPORT=5))

# best Model: ~survey_minutes + air_temp + rh ~ 1
dredge(fm1_g3, beta = "none")

best_g3 <- pcount(~survey_minutes + air_temp + rh ~ 1,
                  data = umf_green3, 
                  engine = "R",
                  control=list(trace=T, REPORT=5))

backTransform(best_g3, "state") 
plogis(coef(best_g3, type = "det"))
backTransform(fm1_g3, "det")



```
$~$

#### Assuming the sites and enviro variables are exactly the same we estimate there is 24.42 +-9.67 frogs at each sites and with 31% of detecting each  individual when 3 repeat visits occur nightly.

\newpage

### static n-mixture with no co-variates - 2 repeat visits

```{r}

first_green_frog_unmarked_nmixture <- green_frog_visits %>% 
  ungroup() %>% 
  select(!c(site, c(visit_3:visit_6))) %>% 
  slice(1:3) 

second_green_frog_unmarked_nxmixture <- green_frog_visits %>% 
 ungroup() %>% 
  select(site, c(visit_4:visit_5)) %>% 
  slice(1) %>% 
  rename(visit_1 = visit_4,
         visit_2 = visit_5) %>% 
  select(!c(site))

green_frog_nmixture_2_visits <- rbind(first_green_frog_unmarked_nmixture, second_green_frog_unmarked_nxmixture)


umf_green2 <- unmarkedFramePCount(y = green_frog_nmixture_2_visits,
                                obsCovs = list(survey_minutes = duration_mins[,1:2],
                                               #water_temp = water,
                                               air_temp = air[,1:2],
                                               sky = sky[,1:2],
                                               wind = wind[,1:2],
                                               rh = rh[,1:2]),
                                siteCovs = area)

summary(umf_green2)

fm1_g2 <- pcount(~ survey_minutes  + air_temp + rh + sky + wind ~ area_sqr_m, 
               data = umf_green2, 
               engine = "R",
               control=list(trace=T, REPORT=5))


# Best Model: ~survey_minutes + air_temp + rh ~1
# Poor AIC values and weights
dredge(fm1_g2, beta = "none")

best_g2 <- pcount(~ survey_minutes  + air_temp + rh ~ 1, 
                  data = umf_green2, 
                  engine = "R",
                  control=list(trace=T, REPORT=5))


backTransform(best_g2, "state") 
plogis(coef(best_g2, type = "det"))

backTransform(best_g2, "det")



```
$~$

#### Assuming the sites and enviro variables are exactly the same we estimate there is 45.37 +-50.33 frogs at each sites and with 17% of detecting each  individual when 3 repeat visits occur nightly.

\newpage



## Query CMR data
```{r}
# Data
cmr_q <- "select r.region, s.site, v.date, v.survey_time, s2.duration_minutes, 
          c.species_capture, c.capture_type, cmr.cmr_id
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join capture c on s2.survey_id = c.survey_id
          join cmr cmr on c.capture_mark_recapture = cmr.capture_mark_recapture
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01';"

cmr_raw_data <- dbGetQuery(connection, cmr_q) %>% 
  select(!c(region, survey_time, duration_minutes)) %>% 
  arrange(date)

#write_csv(cmr_raw_data, here("data", "cmr_raw_data.csv"))

# find all visits
visit_cmr_q <- "select r.region, s.site, v.date, v.survey_time, s2.detection_type
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                join survey s2 on v.visit_id = s2.visit_id
                where r.region = 'pennsylvania'
                and v.date > '2023-01-01'
                and s2.detection_type = 'capture';"

cmr_raw_visits <-dbGetQuery(connection, visit_cmr_q) %>% 
  arrange(date) %>% 
  select(site, date)

#write_csv(cmr_raw_visits, here("data", "cmr_raw_visits.csv"))
```

## Visualize all CMR Visits
```{r}

viz <- cmr_raw_visits %>% 
  group_by(site) %>% 
  summarise(n = n())

ggplot(data = viz) +
  geom_col(aes(x=site, y = n)) +
  ggtitle("Raw Visits") +
  theme(axis.text.x = element_text(angle = 90))
  

```


## Bullfrog CMR data
### Matrix: individual counts by visits
```{r}

#cmr_raw_data <- read_csv(here("data", "cmr_raw_data.csv"))
#mr_raw_visits <- read_csv(here("data", "cmr_raw_visits.csv"))

bull_mid_clean_up <- cmr_raw_data %>% 
  filter(species_capture == "rana_catesbeiana") %>% 
  select(!c(capture_type)) %>% 
  unite(species_capture, c(species_capture, cmr_id), sep = "_")
  
bull_pop_zeros <- cmr_raw_visits %>% 
  left_join(bull_mid_clean_up) %>%
  complete(nesting(date, site), 
           fill = list(n = 0)) %>% 
  ungroup() %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() 

remove_4_6 <- bull_pop_zeros %>% 
  filter(n_visit %in% c("visit_4", "visit_5", "visit_6")) %>% 
  mutate(site = if_else(site == "rv_pond", "rv_pond_2", site),
         n_visit = if_else(n_visit == "visit_4", "visit_1", n_visit),
         n_visit = if_else(n_visit == "visit_5", "visit_2", n_visit),
         n_visit = if_else(n_visit == "visit_6", "visit_3", n_visit))

bull_pop_zeros <- bull_pop_zeros %>% 
  filter(!n_visit %in% c("visit_4", "visit_5", "visit_6"))
  

bull_pop_zeros <- rbind(bull_pop_zeros,remove_4_6)  

clean_bull <- bull_pop_zeros %>%   
  group_by(site, species_capture, n_visit) %>% 
  reframe(n = n()) %>% 
  mutate(n = if_else(is.na(species_capture), NA, n)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>%
  drop_na(species_capture) %>%
  #select(!c(visit_5, visit_6)) %>% 
  #relocate(visit_5, .before = visit_6) %>% 
  # relocate(visit_3, .after = visit_2) %>% 
  
  # mutate(across(contains("visit"), 
  #               ~ifelse(is.na(.) &
  #                         !is.na(lag(.)), 0, .))) %>% 
  #select(sort(names(.))) %>% 
  #filter(!site == "tryon_weber") %>% 
  unite(species_capture, c("site", "species_capture"), sep = "_", na.rm = T) %>% 
  mutate_all(~replace_na(.,0)) 
  
  
```

### Final CMR matrix - 3 repeat Visits
```{r}

clean_bull_3 <- clean_bull

clean_bull_3$captureHistory <- paste(clean_bull_3$visit_1, clean_bull_3$visit_2, clean_bull_3$visit_3,
                               sep = "")

# clean_bull <- clean_bull %>% 
#   ungroup() %>% 
#   group_by(species_capture, captureHistory) %>% 
#   unique()

lev <- unique(clean_bull_3$captureHistory)

clean_bull_3$captureHistory <- factor(clean_bull_3$captureHistory, levels = lev)

bull_table_3 <- table(clean_bull_3$species_capture, clean_bull_3$captureHistory)
  

kable(head(bull_table_3, n = 15))

```

### obs covariates, piFun equal detection, Model runn
```{r}
class(bull_table_3) <- "matrix"

o2y <- matrix(1, 3, 5)

crPiFun <- function(p) {
    p1 <- p[,1]
    p2 <- p[,2]
    p3 <- p[,3]

    cbind("100" = p1 * (1-p2) * (1-p3),    #1: 100    
          "010" = (1-p1) * p2 * (1-p3),    #2: 010
          "001" = (1-p1) * (1-p2) * p3,    #3: 001
          "110" = p1 * p2 * (1-p3),        #4: 110
          "011" = (1-p1) * p2 * p3         #5: 011
          
    )
}


umf_3 <- unmarkedFrameMPois(y = bull_table_3, piFun = "crPiFun", obsToY = o2y)

fm_3 <- multinomPois(~1 ~1, umf_3, engine = "R")

backTransform(fm_3, "state")
backTransform(fm_3, "det") 
```

#### Assuming sites are identical we estimate there are 1.86 individuals at each site? With a 26% chance of detecting each individual?  Not fully sure how to interpret results. 

\newpage

### Final CMR matrix - 2 repeat Visits
```{r}

clean_bull_2 <- clean_bull

clean_bull_2$captureHistory <- paste(clean_bull_2$visit_1, clean_bull_2$visit_2,
                               sep = "")

# clean_bull <- clean_bull %>% 
#   ungroup() %>% 
#   group_by(species_capture, captureHistory) %>% 
#   unique()

lev <- unique(clean_bull_2$captureHistory)

clean_bull_2$captureHistory <- factor(clean_bull_2$captureHistory, levels = lev)

bull_table_2 <- table(clean_bull_2$species_capture, clean_bull_2$captureHistory)
  

kable(head(bull_table_2, n = 15))

```

### obs covariates, piFun equal detection, Model runn
```{r}
class(bull_table_2) <- "matrix"

o2y <- matrix(1, 2, 4)

crPiFun <- function(p) {
    p1 <- p[,1]
    p2 <- p[,2]

    cbind("10" = p1 * (1-p2),        #1: 10    
          "01" = p1 * (1-p2),        #2: 01
          "00" = (1-p1) * (1-p2),    #3: 00
          "11" = p1 * p2             #4: 11
          
    )
}


umf_2 <- unmarkedFrameMPois(y = bull_table_2, piFun = "crPiFun", obsToY = o2y)

fm_2 <- multinomPois(~1 ~1, umf_2, engine = "R")

backTransform(fm_2, "state")
backTransform(fm_2, "det")
```

\newpage

# STOP: Species Not detected in 2023 data for VES

## pseudacris_crucifer
### N-Mixture Table formatting
#### Filter data for `pseudacris_crucifer`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.
```{r}

# peep_frog_visits <- nmix_clean_up %>% 
#   select(site, date, species_ves, n) %>% 
#   filter(species_ves == "pseudacris_crucifer") %>% 
#   select(!species_ves) %>% 
#   group_by(site) %>% 
#   mutate(n_visit = match(date, unique(date)),
#          n_visit = paste0("visit_", n_visit, sep = "")) %>% 
#   select(!date) %>% 
#   ungroup() %>%
#   pivot_wider(names_from = c("n_visit"), values_from = c("n"))%>% 
#   group_by(site) %>% 
#   mutate(across(contains("visit"), 
#                 ~ifelse(is.na(.) &
#                           !is.na(lag(.)), 0, .)))
# 
# 
# kable(peep_frog_visits)

```

### static n-mixture model no covariates
```{r}
# peep_unmarked_nmixture <- peep_frog_visits %>% 
#   ungroup() %>% 
#   #filter(capture_type == "new") %>% 
#   select(!c(site)) 
# 
# 
# umf <- unmarkedFramePCount(y = peep_unmarked_nmixture)
# 
# summary(umf)
# 
# fm1 <- pcount(~1 ~1, data = umf)
# 
# backTransform(fm1, "state") 
# 
# backTransform(fm1, "det")



```
#### Assuming the sites and enviro variables are exactly the same we can estimate there is 85.7 +-24.4 frogs at each site with a 1.2% chance of detecting each individual.

\newpage

## rana_pipens

### N-Mixture Table Formatting
#### Filter data for `rana_pipens`, tally the numbner of visits, pivot data frame into correct matrix form, and finally populate zeros into the NAs if sites were visited.

```{r}

# leop_frog_visits <- nmix_clean_up %>% 
#   select(site, date, species_ves, n) %>% 
#   filter(species_ves == "rana_pipiens") %>% 
#   #select(!species_capture) %>% 
#   group_by(site) %>% 
#   mutate(n_visit = match(date, unique(date)),
#          n_visit = paste0("visit_", n_visit, sep = "")) %>% 
#   select(!date) %>% 
#   ungroup() %>%
#   group_by(site, n_visit, ) %>% 
#   summarise(n = sum(n)) %>% 
#   ungroup() %>% 
#   pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>% 
#   #add_row(site = "phelps_pond", capture_type = "recapture") %>% 
#   group_by(site) %>% 
#   mutate(across(contains("visit"), 
#                 ~ifelse(is.na(.) &
#                           !is.na(lag(.)), 0, .))) 
# 
# 
# kable(leop_frog_visits)

```

### static n-mixture with no co-variates

```{r}

# leop_frog_unmarked_nmixture <- leop_frog_visits %>% 
#   ungroup() %>% 
#   select(!c(site)) 
# 
# 
# umf <- unmarkedFramePCount(y = leop_frog_unmarked_nmixture)
# 
# summary(umf)
# 
# fm1 <- pcount(~1 ~1, data = umf)
# 
# backTransform(fm1, "state") 
# 
# backTransform(fm1, "det")



```

\newpage

```{r}

# Choose sample sizes and prepare observed data array y
set.seed(1)
M <- 100
J <- 3
C <- matrix(NA, nrow = M, ncol = J) # to contain the observed data


vegHt <- sort(runif(M, -1, 1)) # sort for graphical convenience

beta0 <- 0 # Log-scale intercept
beta1 <- 2 # Log-scale slope for vegHt
lambda <- exp(beta0 + beta1 * vegHt) 

N <- rpois(M, lambda) 

wind <- array(runif(M * J, -1, 1), dim = c(M, J))

time <- matrix(rep(as.character(1:J), M), ncol = J, byrow = TRUE)
hab <- c(rep("A", 33), rep("B", 33), rep("C", 34))

a <- data.frame(vegHt = vegHt, hab = hab)

b <- list(time = time, wind = wind)

```

```{r}
# Simulate data
set.seed(35)
nSites <- 100
nVisits <- 3
x <- rnorm(nSites) # a covariate
beta0 <- 0
beta1 <- 1
lambda <- exp(beta0 + beta1*x) # expected counts at each site
N <- rpois(nSites, lambda) # latent abundance
y <- matrix(NA, nSites, nVisits)
p <- c(0.3, 0.6, 0.8) # detection prob for each visit
for(j in 1:nVisits) {
y[,j] <- rbinom(nSites, N, p[j])
}
# Organize data
visitMat <- matrix(as.character(1:nVisits), nSites, nVisits, byrow=TRUE)
umf <- unmarkedFramePCount(y=y, siteCovs=data.frame(x=x),
obsCovs=list(visit=visitMat))
summary(umf)
# Fit a model
fm1 <- pcount(~visit-1 ~ x, umf, K=50)
fm1
```

```{r}
alfl.covs <- read.csv(system.file("csv", "alflCovs.csv",
    package="unmarked"), row.names=1)

intervalMat <- matrix(c('1','2','3'), 50, 3, byrow=TRUE)
class(alfl.H1) <- "matrix"
umf.cr1 <- unmarkedFrameMPois(y=alfl.H1,
    siteCovs=alfl.covs[,c("woody", "struct", "time.1", "date.1")],
    obsCovs=list(interval=intervalMat),
    obsToY=o2y, piFun="crPiFun")


```

```{r}
data(mallard)
mallardUMF <- unmarkedFramePCount(mallard.y, siteCovs = mallard.site,
obsCovs = mallard.obs)
(fm.mallard <- pcount(~ ivel+ date + I(date^2) ~ length + elev + forest, mallardUMF, K=30))
(fm.mallard.nb <- pcount(~ date + I(date^2) ~ length + elev, mixture = "NB", mallardUMF, K=30))


```

```{r}
# Fake data
R <- 4 # number of sites
J <- 3 # number of visits
y <- matrix(c(
   1,2,0,
   0,0,0,
   1,1,1,
   2,2,1), nrow=R, ncol=J, byrow=TRUE)
y

site.covs <- data.frame(x1=1:4, x2=factor(c('A','B','A','B')))
site.covs

obs.covs <- list(
   x3 = matrix(c(
      -1,0,1,
      -2,0,0,
      -3,1,0,
      0,0,0), nrow=R, ncol=J, byrow=TRUE),
   x4 = matrix(c(
      'a','b','c',
      'd','b','a',
      'a','a','c',
      'a','b','a'), nrow=R, ncol=J, byrow=TRUE))
obs.covs

umf <- unmarkedFramePCount(y=y, siteCovs=site.covs, 
    obsCovs=obs.covs)          # organize data
umf                            # take a l
summary(umf)                   # summarize data
fm <- pcount(~1 ~1, umf, K=10) # fit a model
      
```

