---
title: "CMR"
format: html
editor: visual
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, lubridate, kableExtra, GGally, MuMIn, AHMbook, AICcmodavg)

```

## Connect to `survey_data` schema in `ribbitr` database
```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")



```

## Query CMR data
```{r}
# Data
cmr_q <- "select r.region, s.site, v.date, v.survey_time, s2.duration_minutes, 
          c.species_capture, c.capture_type, cmr.cmr_id
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join capture c on s2.survey_id = c.survey_id
          join cmr cmr on c.capture_mark_recapture = cmr.capture_mark_recapture
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01';"

cmr_raw_data <- dbGetQuery(connection, cmr_q) %>% 
  select(!c(region, survey_time, duration_minutes)) %>% 
  arrange(date)

#write_csv(cmr_raw_data, here("data", "cmr_raw_data.csv"))

# find all visits
visit_cmr_q <- "select r.region, s.site, v.date, v.survey_time, s2.detection_type
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                join survey s2 on v.visit_id = s2.visit_id
                where r.region = 'pennsylvania'
                and v.date > '2023-01-01'
                and s2.detection_type = 'capture';"

cmr_raw_visits <-dbGetQuery(connection, visit_cmr_q) %>% 
  arrange(date) %>% 
  select(site, date)

#write_csv(cmr_raw_visits, here("data", "cmr_raw_visits.csv"))
```

## Bullfrog CMR data - 3 Visits
### Matrix: individual counts by visits
```{r}

#cmr_raw_data <- read_csv(here("data", "cmr_raw_data.csv"))
#mr_raw_visits <- read_csv(here("data", "cmr_raw_visits.csv"))

bull_mid_clean_up <- cmr_raw_data %>% 
  filter(species_capture == "rana_catesbeiana") %>% 
  select(!c(capture_type)) %>% 
  unite(species_capture, c(species_capture, cmr_id), sep = "_")
  
bull_pop_zeros <- cmr_raw_visits %>% 
  left_join(bull_mid_clean_up) %>%
  complete(nesting(date, site), 
           fill = list(n = 0)) %>% 
  ungroup() %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() 

# second survey period for rv pond convert to 123 visits
remove_4_6 <- bull_pop_zeros %>% 
  filter(n_visit %in% c("visit_4", "visit_5", "visit_6")) %>% 
  mutate(site = if_else(site == "rv_pond", "rv_pond_2", site),
         n_visit = if_else(n_visit == "visit_4", "visit_1", n_visit),
         n_visit = if_else(n_visit == "visit_5", "visit_2", n_visit),
         n_visit = if_else(n_visit == "visit_6", "visit_3", n_visit))

bull_pop_zeros <- bull_pop_zeros %>% 
  filter(!n_visit %in% c("visit_4", "visit_5", "visit_6"))
  

bull_pop_zeros <- rbind(bull_pop_zeros,remove_4_6)  

clean_bull <- bull_pop_zeros %>%   
  group_by(site, species_capture, n_visit) %>% 
  reframe(n = n()) %>% 
  mutate(n = if_else(is.na(species_capture), NA, n)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>%
  drop_na(species_capture) %>%
  unite(species_capture, c("site", "species_capture"), sep = "_", na.rm = T) %>% 
  mutate_all(~replace_na(.,0)) 

write_csv(clean_bull, here("all_sites_clean_bull.csv"))
  
  
```

### Final CMR matrix - 3 repeat Visits
```{r}

clean_bull_3 <- clean_bull

clean_bull_3$captureHistory <- paste(clean_bull_3$visit_1, clean_bull_3$visit_2, clean_bull_3$visit_3,
                               sep = "")
lev <- unique(clean_bull_3$captureHistory)

clean_bull_3$captureHistory <- factor(clean_bull_3$captureHistory, levels = lev)

bull_table_3 <- table(clean_bull_3$species_capture, clean_bull_3$captureHistory)
  

```

### obs covariates, piFun equal detection, Model runn
```{r}
class(bull_table_3) <- "matrix"

o2y <- matrix(1, 3, 5)

crPiFun <- function(p) {
    p1 <- p[,1]
    p2 <- p[,2]
    p3 <- p[,3]

    cbind("100" = p1 * (1-p2) * (1-p3),    #1: 100    
          "010" = (1-p1) * p2 * (1-p3),    #2: 010
          "001" = (1-p1) * (1-p2) * p3,    #3: 001
          "110" = p1 * p2 * (1-p3),        #4: 110
          "011" = (1-p1) * p2 * p3         #5: 011
          
    )
}


umf_3 <- unmarkedFrameMPois(y = bull_table_3, piFun = "crPiFun", obsToY = o2y)

fm_3 <- multinomPois(~1 ~1, umf_3, engine = "R")

backTransform(fm_3, "state")
backTransform(fm_3, "det") 
```


# CMR tuttle_pond - ONLY
```{r}
bull_mid_clean_up <- cmr_raw_data %>% 
  filter(species_capture == "rana_catesbeiana",
         site == "tuttle_pond") %>% 
  select(!c(capture_type)) %>% 
  unite(species_capture, c(species_capture, cmr_id), sep = "_")
  
bull_pop_zeros <- cmr_raw_visits %>% 
  filter(site == "tuttle_pond") %>% 
  left_join(bull_mid_clean_up) %>%
  complete(nesting(date, site), 
           fill = list(n = 0)) %>% 
  ungroup() %>% 
  group_by(site) %>% 
  mutate(n_visit = match(date, unique(date)),
         n_visit = paste0("visit_", n_visit, sep = "")) %>% 
  select(!date) %>% 
  ungroup() 

clean_bull <- bull_pop_zeros %>%   
  group_by(site, species_capture, n_visit) %>% 
  reframe(n = n()) %>% 
  mutate(n = if_else(is.na(species_capture), NA, n)) %>% 
  pivot_wider(names_from = c("n_visit"), values_from = c("n")) %>%
  drop_na(species_capture) %>%
  unite(species_capture, c("site", "species_capture"), sep = "_", na.rm = T) %>% 
  mutate_all(~replace_na(.,0)) %>% 
  relocate(visit_1, .before=  visit_2)

write_csv(clean_bull, here("tuttle_clean_bull.csv"))

clean_bull_3 <- clean_bull


clean_bull_3$captureHistory <- paste(clean_bull_3$visit_1, clean_bull_3$visit_2, clean_bull_3$visit_3,
                               sep = "")

lev <- unique(clean_bull_3$captureHistory)

clean_bull_3$captureHistory <- factor(clean_bull_3$captureHistory, levels = lev)

bull_table_3 <- table(clean_bull_3$species_capture, clean_bull_3$captureHistory)
  

class(bull_table_3) <- "matrix"

o2y <- matrix(1, 3, 3)


crPiFun <- function(p) {
    p1 <- p[,1]
    p2 <- p[,2]
    p3 <- p[,3]

    cbind("011" = (1-p1) * p2 * p3,        #1: 011    
          "010" = (1-p1) * p2 * (1-p3),    #2: 010
          "001" = (1-p1) * (1-p2) * p3    #3: 001
          
          
    )
}


umf_3 <- unmarkedFrameMPois(y = bull_table_3, piFun = "crPiFun", obsToY = o2y)

fm_3 <- multinomPois(~1 ~1, umf_3, engine = "R")

summary(fm_3)

backTransform(fm_3, "state")
backTransform(fm_3, "det") 

```